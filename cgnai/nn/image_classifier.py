# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/nn/01_image_classifier.ipynb.

# %% auto 0
__all__ = ['ConvLinClassifier']

# %% ../notebooks/nn/01_image_classifier.ipynb 3
import torch
import torch.nn as nn
import torch.nn.functional as F


class ConvLinClassifier(nn.Module):
    def __init__(self, 
                 imshape, 
                 classes, 
                 channels = [16,32], 
                 kernels  = [3,3], 
                 hidden   = None):
        super().__init__()
        
        
        
        conv_layers = []
        ch          = [imshape[0]] + channels
        for i in range(len(ch)-1): 
            k = 3 if kernels is None else kernels[i]
            conv_layers.extend([
                nn.Conv2d(ch[i], ch[i+1], k), 
                nn.ReLU()])
            
        self.conv = nn.Sequential(
                        *conv_layers, 
                        nn.MaxPool2d(2), 
                        nn.Flatten(1))
        
        with torch.no_grad():
            x = torch.rand(128,*imshape) # b, c, w, h
            x = self.conv(x)
            h0 = x.size(-1)
        
        lin_layers = []
        hs         = [h0] + hidden + [classes]
        for i in range(len(hs)-1):
            lin_layers.extend([ 
                nn.Linear(hs[i], hs[i+1]),
                nn.ReLU()])
        
        
        self.lin  = nn.Sequential(*lin_layers[:-1]) 
        self.out  = nn.Sigmoid() 


    def forward(self, x):
        x = self.conv(x)
        x = self.lin(x)
        x = self.out(x)
        return x
    
