# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/nlq/datasets/02_Spider_dataset.ipynb.

# %% auto 0
__all__ = ['load_partitions', 'prepare_question', 'prepare_tables', 'prepare_sql', 'SpiderDataset']

# %% ../notebooks/nlq/datasets/02_Spider_dataset.ipynb 2
import matplotlib.pyplot as plt
import numpy as np
from ..fileio import *
from ..utils import cgnai_home
import json
from pprint import pprint
import sys
from pathlib import Path
import pandas as pd
import pandasql as ps
from ..utils import listmap

# %% ../notebooks/nlq/datasets/02_Spider_dataset.ipynb 17
def load_partitions(partitions):
    def load_partition(part):
        return load(datapath/f"{part}.json")
    def flatten(l):
        return [item for sublist in l for item in sublist]
    return flatten(map(load_partition, partitions))

# %% ../notebooks/nlq/datasets/02_Spider_dataset.ipynb 18
def prepare_question(d):
    s = "<Q>"
    s += d["question"]
    return s

# %% ../notebooks/nlq/datasets/02_Spider_dataset.ipynb 20
def prepare_tables(dfs):
    s = ""
    for table, df in dfs.items():
        s += "<T>"
        s += table
        s += "<SEP>"
        s += '<SEP>'.join(df.columns)
    return s

# %% ../notebooks/nlq/datasets/02_Spider_dataset.ipynb 21
def prepare_sql(d):
    return d['query']

# %% ../notebooks/nlq/datasets/02_Spider_dataset.ipynb 22
from torch.utils.data import Dataset
from pathlib import Path

class SpiderDataset(Dataset):
    def __init__(self, path="./shared/nlq/data/spider", partitions=["train_spider", "train_others"]):
        self.D = load_partitions(partitions)
        print(f"  | D | = {len(self.D):_.0f}")
        print(f"  |dbs| = {len(set(listmap(get_val('db_id'), self.D)))}")
    def __len__(self): return len(self.D)
    def __getitem__(self, i):
        d = self.D[i]
        dfs = get_dataframes(d)
        
        x = prepare_question(d) + prepare_tables(dfs)
        y = prepare_sql(d)        
        return x,y
    def query_table(self, i, query, rename=True):
        d = self.D[i]
        db_path = datapath/f"database/{d['db_id']}"
        db_sqlite = db_path/f"{d['db_id']}.sqlite"
        with sqlite3.connect(db_sqlite) as con:
            con.text_factory = str
            return pd.read_sql_query(query, con)
